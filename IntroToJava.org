#+TITLE: INTRODUCTION TO JAVA PROGRAMMING

* Introduction

** Intro To Java
- Java was created by James Gosling


** JVM
- The Java Virtual Machine
- Acts as the platform on which Java code runs
- Interface between the OS and code
- Makes Java code platform/OS independent


** Java workflow
- Java code written into text files
- The Java compliler comiles this code into byte instructions which are fed to the JVM
- The byte instructions are in .class files
- The JVM runs the .class files


** JRE and Java SDK
- the JRE is the Java Runtime Environment which consists of the JVM and the core Java libraries
- the Java SDK includes the Java compiler and other dev tools along with the JVM and core Java libraries


** Main features of Java
- Object Oriented
- JVM renders it platform independent
- Own garbage collection
- Strongly typed language

  
** Classpath
- Describes where the Java Compiler and JVM look for .class files to load
- Usage of external Java libraries mandates addition of the path of these libraries to the classpath
  

* Packages, Classes and Objects

** Packages
- Are logical groupings of classes, very similar to dlls in the C# .NET world
- Classes are assigned to packages like so:
#+BEGIN_SRC
    package test;
   
    class MyClass{ 
     ...
    }
#+END_SRC
- Help reference classes of same name. The full name of a class in a package will be 
=<package_name>.<classname>=
- The package name should reflect the directory structure under which the class source file is located.
- Compiling a package involves compiling the classes in the pacakge directory, by running the javac from the directory above the package. So, if your source file is hello.java, and is located in SampleCode, and the hello.java is pacakged under SampleCode, to compile hello.java, you need to do
=javac SampleCode/hello.java=

** Class
- A public class is to be contained in .java file bearing the class name. Hence, there can only be one public class in a .java file. However there can be multiple private classes in the .java file.
- A class can also be inherited by another class. The inheriting class is called the /sub-class/
- The sub-class can be said to *extend* the /base-class/
- A sub-class can only inherit from a single base class

#+BEGIN_SRC
-----------------------
<file BaseHello.java>
package SampleCode;

public class BaseHello{

    public void hello(){
	System.out.println("Hello from the base class!");
    }
}

-----------------------

<file SubHello.java>
package SampleCode;

public class SubHello extends BaseHello{

    @Override
    public void hello(){
	System.out.println("Hello from the subclass!");
    }
}
#+END_SRC

- The /@Override/ keyword is used to indicate that we are overriding a method from a supertype. If at all the name is changed in the baseclass, the compiler will throw an error 
